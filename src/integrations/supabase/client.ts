// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import { Database } from '@/types/database.types';

const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
  throw new Error('Missing Supabase environment variables');
}

console.log('Supabase URL:', supabaseUrl);
console.log('Supabase Key present:', !!supabaseAnonKey);

// Custom storage implementation with logging
const storage = {
  getItem: (key: string) => {
    const value = localStorage.getItem(key);
    // console.log(`Getting item from storage: ${key}`, value); // Keep storage simple
    return value;
  },
  setItem: (key: string, value: string) => {
    // console.log(`Setting item in storage: ${key}`, value);
    localStorage.setItem(key, value);
  },
  removeItem: (key: string) => {
    // console.log(`Removing item from storage: ${key}`);
    localStorage.removeItem(key);
  },
};

// Create Supabase client with custom storage
const supabaseClient = createClient<Database>(supabaseUrl, supabaseAnonKey, {
  auth: {
    storage,
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: true,
  },
  db: {
    schema: 'public',
  },
  // global: {
  //   headers: {
  //     'x-application-name': 'chefandher',
  //   },
  // },
});

// Log initial session state (optional, can be removed if causing issues)
supabaseClient.auth.getSession().then(({ data: { session }, error }) => {
  console.log('Initial session state check (client.ts):', { session, error });
});

// No fetch override

// No .from override

// No explicit connection test here, rely on ProtectedRoute

// Keep global error handler for now
window.addEventListener('unhandledrejection', (event) => {
  console.error('[FATAL] Unhandled promise rejection:', event.reason);
});

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = supabaseClient;