
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { toast } from 'sonner';

const SUPABASE_URL = "https://pphkyhrdfcceeuwgeqgu.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InBwaGt5aHJkZmNjZWV1d2dlcWd1Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3Mzg3NTA2NTUsImV4cCI6MjA1NDMyNjY1NX0.RGfDegWptQst27i3RRcFQTagjmvA3vm9XCo8jG9Wn6o";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Create and configure supabase client with better error handling and retry logic
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true
  },
  global: {
    headers: {
      'x-application-name': 'menu-planner'
    },
    // Add fetch options with timeout to prevent hanging requests
    fetch: (url, options = {}) => {
      const controller = new AbortController();
      const { signal } = controller;
      
      // Set timeout to 15 seconds to abort hanging requests
      const timeoutId = setTimeout(() => {
        controller.abort();
      }, 15000);
      
      return fetch(url, { ...options, signal })
        .then(response => {
          clearTimeout(timeoutId);
          return response;
        })
        .catch(error => {
          clearTimeout(timeoutId);
          console.error('Supabase fetch error:', error);
          // Specifically handle abort errors
          if (error.name === 'AbortError') {
            toast.error('The request timed out. Please check your connection and try again.');
          }
          throw error;
        });
    }
  },
  // Log DB query and authentication errors to the console
  db: {
    schema: 'public'
  }
});

// Add event listeners for connection issues
if (typeof window !== 'undefined') {
  window.addEventListener('online', () => {
    console.log('Application is back online');
    toast.success('You are back online');
  });
  
  window.addEventListener('offline', () => {
    console.log('Application is offline');
    toast.error('You are offline. Some features will be unavailable.');
  });
}
